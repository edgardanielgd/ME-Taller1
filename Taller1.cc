#include <fstream>
#include <iostream>
#include <tuple>

#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/internet-module.h"
#include "ns3/mobility-module.h"
#include "ns3/olsr-module.h"
#include "ns3/applications-module.h"
#include "ns3/yans-wifi-helper.h"
#include "ns3/point-to-point-helper.h"
#include "ns3/stats-module.h"

// Utils
// TODO: Create a new module and separate files in helper folder
// as described here: https://www.nsnam.org/docs/manual/html/new-modules.html

using namespace ns3;

NS_LOG_COMPONENT_DEFINE("Taller1");

class Cluster;
class ClusterNode;
class Level;
double TruncatedDistribution(int, double, double, int);

// Globally accessible
uint32_t simulationTime = 100; // seconds

class ClusterNode
{
public:
  // Resources of this node
  double transferRate;
  double onTime;

  // Reference to node
  Ptr<Node> node;

  // Constructor
  ClusterNode(double, double, Ptr<Node>);

  // Configure random UDP traffic
  void SetupTraffic(
      uint16_t port,
      double startTime,
      double stopTime);

  // Calculate resources on this node
  double GetResources();

  // Send random traffic around node's levels
  void ConfigureRandomPacketSend(OnOffHelper, AddressValue);

  void SendCallback(Ptr<Socket>, uint32_t);
};

ClusterNode::ClusterNode(double _transferRate, double _onTime, Ptr<Node> _node)
    : transferRate(_transferRate), onTime(_onTime), node(_node) {}

double ClusterNode::GetResources()
{
  return transferRate * onTime;
}

void ClusterNode::ConfigureRandomPacketSend(OnOffHelper onOffHelper, AddressValue remoteAddress)
{
  // Configure communication issues
  std::stringstream ssontime;
  ssontime << "ns3::ConstantRandomVariable[Constant=" << onTime << "]";
  onOffHelper.SetAttribute("OnTime", StringValue(ssontime.str().c_str()));

  // Poisson traffic is generated by using an exponential random variable
  std::stringstream ssofftime;
  ssofftime << "ns3::ConstantRandomVariable[Constant=" << (1 - onTime) << "]";
  onOffHelper.SetAttribute("OffTime", StringValue(ssofftime.str().c_str()));

  // Configure traffic
  onOffHelper.SetAttribute("DataRate", DataRateValue(DataRate(transferRate)));

  // Now send random traffic to remote address
  onOffHelper.SetAttribute("Remote", AddressValue(remoteAddress));

  Ptr<ExponentialRandomVariable> var = CreateObject<ExponentialRandomVariable>();
  var->SetAttribute("Mean", DoubleValue(20));

  // Install on node
  ApplicationContainer apps = onOffHelper.Install(node);

  apps.Start(Seconds(var->GetValue()));
  apps.Stop(Seconds(simulationTime));
}

void ClusterNode::SendCallback(Ptr<Socket> socket, uint32_t availableBytes)
{
  std::cout << "Packet sent" << std::endl;
}

// Useful for further advancements
// Its supossed that clusters will belong to a level and will have a head node
// Messages between clusters will be send and received by the head node
class Cluster
{

public:
  // Nodes belonging to this cluster
  NodeContainer nodes;

  // Nodes devices associated to this cluster
  NetDeviceContainer devices;

  // Keep a list of nodes that belong to this cluster
  std::vector<ClusterNode> clusterNodes;

  // Count of nodes of this cluster
  int nNodes;

  // Save cluster's resources
  double resources;

  // Level index of this cluster
  int level;

  // Cluster index, useful for subnetting masks
  int index;

  // Head node of cluster
  Ptr<Node> head;

  Cluster(int, double, int, double, int);

  // Configure and generate network devices container
  void SetupDevices(
      YansWifiPhyHelper phy,
      WifiMacHelper mac,
      WifiHelper wifi);

  // Configure network addresses for node
  Ipv4InterfaceContainer SetupNetworkAddresses(Ipv4AddressHelper &address);
};

Cluster::Cluster(int _nNodes, double _resources, int _level, double _probability, int _index)
{
  // Set cluster's resources
  resources = _resources;

  // Set level index
  level = _level;

  // Set number of nodes
  nNodes = _nNodes;

  // Set cluster index
  index = _index;

  // Create nodes
  nodes.Create(nNodes);

  // Set head node
  head = nodes.Get(0);

  // Assign resources to each node
  for (int i = 0; i < nNodes; i++)
  {
    // Get resources for this node
    double resourcesForNode = TruncatedDistribution(
        nNodes, resources, _probability, i);

    // Resources should be distributen in OnTime and TransferRate

    double onTime = 0.5; // Mean of exponential time
    double transferRate = resourcesForNode / onTime;
    ClusterNode clusterNode(transferRate, onTime, nodes.Get(i));

    clusterNodes.push_back(clusterNode);
  }
}

void Cluster::SetupDevices(
    YansWifiPhyHelper phy,
    WifiMacHelper mac,
    WifiHelper wifi)
{
  // Configure devices
  devices = wifi.Install(phy, mac, nodes);
}

Ipv4InterfaceContainer Cluster::SetupNetworkAddresses(Ipv4AddressHelper &address)
{
  // Set subnet mask, unique for each cluster
  std::stringstream s;
  s << "10." << level << "." << index << ".0";
  std::cout << "Assign ip mask: " << s.str() << " to cluster " << index << " at level " << level << std::endl;
  address.SetBase(ns3::Ipv4Address(s.str().c_str()), "255.255.255.0");
  return address.Assign(devices);
}

class Level
{
public:
  // Array of clusters
  std::vector<Cluster> clusters;

  // Number of clusters on this level
  int nClusters;

  // Save this level index (higher levels mean higher hierarchical level)
  int index;

  // Interfaces list
  Ipv4InterfaceContainer interfacesBetweenNodes;

  // Head interfaces list
  Ipv4InterfaceContainer interfacesBetweenHeads;

  // Devices list
  NetDeviceContainer devicesBetweenLevels;

  // Default constructor, its useful to create clusters later
  Level(int, int);

  // Create clusters
  void CreateClusters(int, double *, double *);

  // Configure all subclusters
  void SetupDevices(
      YansWifiPhyHelper phy,
      WifiMacHelper mac,
      WifiHelper wifi,
      MobilityHelper mobility,
      InternetStackHelper internet);

  // Calculate total number of resources in this level
  double GetTotalResources();

  // Configure network addresses for all nodes
  Ipv4InterfaceContainer SetupNetworkAddresses();

  // Configure network addresses for all head nodes
  Ipv4InterfaceContainer SetupHeadsAddresses(Level, bool);
};

Level::Level(
    int _nClusters, int _index)
{
  // Reserve space for clusters
  clusters.reserve(_nClusters);

  // Set number of clusters
  nClusters = _nClusters;

  // Set level index
  index = _index;
}

void Level::CreateClusters(
    int _nNodesPerCluster,
    double _probabilities[],
    double _resources[])
{
  // Assign resources to each cluster
  for (int i = 0; i < nClusters; i++)
  {
    Cluster cluster(_nNodesPerCluster, _resources[i], index, _probabilities[i], i);
    clusters.push_back(cluster);

    // Keep track of all nodes in all clusters within this level, useful for mobility configs
    // allNodes.Add(cluster.nodes);
    std::cout << "Cluster: " << i << " created in level " << index << std::endl;
  }
  std::cout << "All clusters created in level " << index << std::endl;
}

void Level::SetupDevices(
    YansWifiPhyHelper phy,
    WifiMacHelper mac,
    WifiHelper wifi,
    MobilityHelper mobility,
    InternetStackHelper internet)
{
  // Configure devices for each cluster
  for (int i = 0; i < nClusters; i++)
  {
    clusters[i].SetupDevices(phy, mac, wifi);
    mobility.Install(clusters[i].nodes);
    internet.Install(clusters[i].nodes);

    std::cout << "Cluster: " << i << " configured in level " << index << std::endl;
    // allDevices.Add(clusters[i].devices);
  }
  std::cout << "All clusters configured in level " << index << std::endl;
}

double Level::GetTotalResources()
{
  double totalResources = 0;
  for (int i = 0; i < nClusters; i++)
  {
    totalResources += clusters[i].resources;
  }
  return totalResources;
}

Ipv4InterfaceContainer Level::SetupNetworkAddresses()
{
  Ipv4AddressHelper address;

  // Configure network addresses for each cluster and save all of network addresses
  Ipv4InterfaceContainer interfaces;

  for (int i = 0; i < nClusters; i++)
  {
    Ipv4InterfaceContainer clusterInterfaces = clusters[i].SetupNetworkAddresses(address);
    interfacesBetweenNodes.Add(clusterInterfaces);
  }
  std::cout << "All clusters configured with network addresses in level " << index << std::endl;
  return interfacesBetweenNodes;
}

Ipv4InterfaceContainer Level::SetupHeadsAddresses(
    Level nextLevel, bool two_layers_case = true)
{
  // Each head has a p2p connection with a related upper cluster head

  // Create address assigner
  Ipv4AddressHelper address;

  if (two_layers_case)
  {

    // In this case there is only one cluster in upper layer
    Cluster cluster = nextLevel.clusters.at(0);
    std::cout << cluster.nNodes << " " << cluster.clusterNodes.size() << std::endl;

    for (int i = 0; i < nClusters; i++)
    {
      // Get each upper layer's cluster's node

      Ptr<Node> upperNode = cluster.clusterNodes[i].node;

      // Lets associate a head from 1st level to a head from 2nd level (1 to 1)
      PointToPointHelper p2p;
      p2p.SetDeviceAttribute("DataRate", StringValue("5Mbps"));
      p2p.SetChannelAttribute("Delay", StringValue("2ms"));

      NetDeviceContainer devices = p2p.Install(clusters[i].head, upperNode);
      devicesBetweenLevels.Add(devices);

      // Set subnet mask, unique for each cluster
      std::stringstream s;
      s << "172.17." << index * 20 + i << ".0";
      address.SetBase(
          ns3::Ipv4Address(s.str().c_str()),
          "255.255.255.0");
      interfacesBetweenHeads.Add(address.Assign(devices));

      std::cout << "Assigns interfaces between heads" << std::endl;
    }
  }

  return interfacesBetweenHeads;
}

// Truncated distribution assigner
double TruncatedDistribution(
    int nPoints, double totalResources, double probability, int nodeIndex)
{
  // Here joins probability density function for truncated geometric distribution
  // Portion of total resources this node will take
  double portion = probability * pow(1 - probability, nodeIndex - 1) / (1 - pow(1 - probability, nPoints));

  // Return resources to assign to node
  return portion * totalResources;
}

// Define main class
class Taller1Experiment
{
public:
  // Define default constructor
  Taller1Experiment();

  // Define default process
  void Run();

  // Handle commandline arguments
  void HandleCommandLineArgs(int, char **);

private:
  // Configure packets receive and send
  Ptr<Socket> SetupPacketReceive(Ipv4Address addr, Ptr<Node> node);

  // Handle received packets
  void ReceivePacket(Ptr<Socket> socket);

  // Handle sent packets
  void SendPacket(Ptr<Socket> socket, uint32_t);

  // Update throught
  void UpdateThroughput();

  // UDP sender port number
  int port;

  // Specialized configs

  // Number of levels
  int nLevels;

  // Data for first level
  int nClusters_1st_level, nNodes_pC_1st_level;

  // Data for second level
  int nClusters_2nd_level, nNodes_pC_2nd_level;

  // Data for third level
  int nClusters_3rd_level, nNodes_pC_3rd_level;

  // Area bounds
  double width, height;
};

// Default constructor
Taller1Experiment::Taller1Experiment()
    // Default port to 9
    : port(9),
      // Default number of levels to 2
      nLevels(2),
      // Default number of clusters in 1st level to 6
      nClusters_1st_level(6),
      // Default number of nodes per cluster in 1st level to 6
      nNodes_pC_1st_level(6),
      // Default number of clusters in 2nd level to 2
      nClusters_2nd_level(1),
      // Default number of nodes per cluster in 2nd level to 2
      nNodes_pC_2nd_level(6),
      // Default number of clusters in 3rd level to 1
      nClusters_3rd_level(1),
      // Default number of nodes per cluster in 3rd level to 2
      nNodes_pC_3rd_level(2),
      // Default width to 500
      width(500),
      // Default height to 500
      height(500)
{
}

// Receive and set command line arguments
void Taller1Experiment::HandleCommandLineArgs(int argc, char **argv)
{
  /*
   * Get console parameters
   */
  CommandLine cmd(__FILE__);
  cmd.AddValue("nLevels", "Number of levels of this cluster", nLevels);
  // Data for first level
  cmd.AddValue("nClusters_1st_level", "Number of clusters in 1st level", nClusters_1st_level);
  cmd.AddValue("nNodes_pC_1st_level", "Number of nodes per cluster in 1st level", nNodes_pC_1st_level);
  // Data for second level
  uint8_t nClusters_2nd_level = 2, nNodes_pC_2nd_level = 2;
  cmd.AddValue("nClusters_2nd_level", "Number of clusters in 1st level", nClusters_2nd_level);
  cmd.AddValue("nNodes_pC_2nd_level", "Number of nodes per cluster in 1st level", nNodes_pC_2nd_level);
  // Data for third level
  uint8_t nClusters_3rd_level = 1, nNodes_pC_3rd_level = 2;
  cmd.AddValue("nClusters_3rd_level", "Number of clusters in 1st level", nClusters_3rd_level);
  cmd.AddValue("nNodes_pC_3rd_level", "Number of nodes per cluster in 1st level", nNodes_pC_3rd_level);
  // Space bounds
  double width = 500, height = 500;
  cmd.AddValue("width", "Width of the space", width);
  cmd.AddValue("height", "Height of the space", height);
  // Parse arguments
  cmd.Parse(argc, argv);
}

// Called when a packet is sent
void Taller1Experiment::SendPacket(Ptr<Socket> socket, uint32_t size)
{
  int64_t now = Simulator::Now().GetMicroSeconds();
  std::cout << now << " Sent one packet!" << std::endl;
}

// Configure packets receive and send
Ptr<Socket>
Taller1Experiment::SetupPacketReceive(Ipv4Address addr, Ptr<Node> node)
{
  TypeId tid = TypeId::LookupByName("ns3::UdpSocketFactory");

  // Create a socket to receive packets
  Ptr<Socket> socket = Socket::CreateSocket(node, tid);
  InetSocketAddress local = InetSocketAddress(addr, port);
  socket->Bind(local);
  socket->SetRecvCallback(MakeCallback(&Taller1Experiment::ReceivePacket, this));

  // Create a sink to calculate throughput
  Ptr<PacketSink> sink = CreateObject<PacketSink>();
  // sink->Setup(socket, local);

  // Connect socket and sink
  // Ptr<Socket> sinkSocket = sink->GetListeningSocket();
  // socket->Connect(local);
  // sinkSocket->Bind(local);
  return socket;
}

// Called when a packet is received
void Taller1Experiment::ReceivePacket(Ptr<Socket> socket)
{
  Ptr<Packet> packet;
  Address senderAddress;

  int64_t now = Simulator::Now().GetMicroSeconds();
  std::cout << now << " Received one packet!" << std::endl;

  while ((packet = socket->RecvFrom(senderAddress)))
  {
    // NS_LOG_UNCOND(PrintReceivedPacket(socket, packet, senderAddress));
  }
}

void Taller1Experiment::Run()
{
  Packet::EnablePrinting();
  //  Define simulation time
  std::string phyMode("DsssRate11Mbps");
  std::string rate("2048bps");
  std::string tr_name("Taller1");

  Config::SetDefault("ns3::OnOffApplication::PacketSize", StringValue("1500"));

  // Set Non-unicastMode rate to unicast mode
  Config::SetDefault("ns3::WifiRemoteStationManager::NonUnicastMode", StringValue(phyMode));

  // Set mac addresses and wifi standard
  WifiHelper wifi;
  wifi.SetStandard(WIFI_STANDARD_80211b);

  // Define wifi phy helper
  YansWifiPhyHelper wifiPhy;
  // Define channel
  YansWifiChannelHelper wifiChannel;

  // Using friss propagation loss model
  // It considers variables such as waves distortion due to obstacles, diffraction and related phenomena
  wifiChannel.AddPropagationLoss("ns3::FriisPropagationLossModel");

  // Use constant speed propagation delay model
  wifiChannel.SetPropagationDelay("ns3::ConstantSpeedPropagationDelayModel");
  // Create the channel of transmission
  wifiPhy.SetChannel(wifiChannel.Create());

  // Create probabilities array
  double probabilities[nClusters_1st_level];
  double resources[nClusters_1st_level];

  for (int i = 0; i < nClusters_1st_level; i++)
  {
    probabilities[i] = 0.5;
    resources[i] = 20;
  }

  // Create first clusters level
  Level lvl1(nClusters_1st_level, 1);

  lvl1.CreateClusters(nNodes_pC_1st_level, probabilities, resources);

  // Create second clusters level
  // For a two layer hierarchical architecture, this resources can vary until
  // a performance measure is met
  Level lvl2(1, 2);

  // Probabilities and resources for this level are the ones which should vary
  double probabiltiesLvl2[] = {0.5};
  double resourcesLvl2[] = {20};
  lvl2.CreateClusters(nNodes_pC_2nd_level, probabiltiesLvl2, resourcesLvl2);

  // Assign MAC Address
  WifiMacHelper wifiMac;
  wifi.SetRemoteStationManager("ns3::ConstantRateWifiManager",
                               "DataMode", StringValue("DsssRate11Mbps"),
                               "ControlMode", StringValue("DsssRate11Mbps"));

  // Set it to adhoc mode
  wifiMac.SetType("ns3::AdhocWifiMac");

  // Randomway mobility
  // How it works:
  // https://www.nsnam.org/docs/release/3.35/doxygen/classns3_1_1_random_waypoint_mobility_model.html#details

  ObjectFactory pos;
  pos.SetTypeId("ns3::RandomRectanglePositionAllocator");

  // Define boundaries for our area (By default 500x500), units are meters
  std::stringstream ssMaxX;
  ssMaxX << "ns3::UniformRandomVariable[Min=0.0|Max=" << width << "]";
  pos.Set("X", StringValue(ssMaxX.str()));

  std::stringstream ssMaxY;
  ssMaxY << "ns3::UniformRandomVariable[Min=0.0|Max=" << height << "]";
  pos.Set("Y", StringValue(ssMaxY.str()));

  // Create position allocators based on geometrical boundaries already defined
  // int64_t streamIndex = 0; // used to get consistent mobility across scenarios
  Ptr<PositionAllocator> taPositionAlloc = pos.Create()->GetObject<PositionAllocator>();

    // streamIndex += taPositionAlloc->AssignStreams(streamIndex);

  // Define speed (Which is distributed uniformly between 0 and 1 (units are m/s))
  double nodeMinSpeed = 0.0, nodeMaxSpeed = 1.0;
  std::stringstream ssSpeed;
  ssSpeed << "ns3::UniformRandomVariable[Min=" << nodeMinSpeed << "|Max=" << nodeMaxSpeed << "]";

  // Pause refers to the time a node waits before changing direction
  // (Node remains static while this time passes)
  std::stringstream ssPause;
  double nodePause = 0.0;
  ssPause << "ns3::ConstantRandomVariable[Constant=" << nodePause << "]";

  // Configure mobility model

  // Set random way mobility
  MobilityHelper mobilityAdhoc;
  mobilityAdhoc.SetMobilityModel("ns3::RandomWaypointMobilityModel",
                                 "Speed", StringValue(ssSpeed.str()),
                                 "Pause", StringValue(ssPause.str()),
                                 "PositionAllocator", PointerValue(taPositionAlloc));
  mobilityAdhoc.SetPositionAllocator(taPositionAlloc);

  // Enable OLSR
  OlsrHelper olsr;

  Ipv4ListRoutingHelper list;
  list.Add(olsr, 100);

  InternetStackHelper internet;
  internet.SetRoutingHelper(list); // has effect on the next Install ()

  // Install devices
  lvl1.SetupDevices(wifiPhy, wifiMac, wifi, mobilityAdhoc, internet);
  lvl2.SetupDevices(wifiPhy, wifiMac, wifi, mobilityAdhoc, internet);

  // Assign IP addresses to nodes
  Ipv4InterfaceContainer adhocInterfacesLvl1 = lvl1.SetupNetworkAddresses();
  Ipv4InterfaceContainer adhocInterfacesLvl2 = lvl2.SetupNetworkAddresses();

  // Assign IP addresses to clusters heads between levels 1 and 2
  Ipv4InterfaceContainer adhocInterfacesInterlevel = lvl1.SetupHeadsAddresses(lvl2);

  // Generator of random cluster indexes
  Ptr<UniformRandomVariable> clusterSelector = CreateObject<UniformRandomVariable>();
  clusterSelector->SetAttribute("Min", DoubleValue(0.0));
  clusterSelector->SetAttribute("Max", DoubleValue(lvl1.nClusters - 1));

  // Generator of random cluster's nodes indexes
  Ptr<UniformRandomVariable> nodeSelector = CreateObject<UniformRandomVariable>();
  clusterSelector->SetAttribute("Min", DoubleValue(0.0));
  // Later we will set the max attribute :)

  int nConnections = 1000;

  // OnOffHelper for all nodes, there are conflicts using an OnOffHelper per node
  OnOffHelper onOffHelper("ns3::UdpSocketFactory", Address());

  // Generate traffic between nodes in first level
  for (int i = 0; i < nConnections; i++)
  {
    int receiverClusterIndex = clusterSelector->GetInteger();
    Cluster receiverCluster = lvl1.clusters[receiverClusterIndex];

    // Here set the max value
    nodeSelector->SetAttribute("Max", DoubleValue(receiverCluster.nNodes - 1));

    int receiverNodeIndex = nodeSelector->GetInteger();
    ClusterNode receiverClusterNode = receiverCluster.clusterNodes[receiverNodeIndex];
    Ptr<Node> receiverNode = receiverClusterNode.node;
    Ipv4Address address = receiverNode->GetObject<Ipv4>()->GetAddress(1, 0).GetLocal();

    // Get receiver node socket
    Ptr<Socket> socket = SetupPacketReceive(address, receiverNode);
    AddressValue remoteAddress(InetSocketAddress(address, port));

    // Choose a sender node
    int senderClusterIndex = clusterSelector->GetInteger();
    Cluster senderCluster = lvl1.clusters[senderClusterIndex];

    // Set again the max value
    nodeSelector->SetAttribute("Max", DoubleValue(senderCluster.nNodes - 1));

    int senderNodeIndex = nodeSelector->GetInteger();
    ClusterNode senderClusterNode = senderCluster.clusterNodes[senderNodeIndex];
    senderClusterNode.ConfigureRandomPacketSend(
        onOffHelper,
        remoteAddress);
  }

  // Set simulation time
  Simulator::Stop(Seconds(simulationTime));

  Simulator::Run();
  Simulator::Destroy();

  // Print Packet Loss for each node
}

int main(int argc, char *argv[])
{
  // Create experiment
  Taller1Experiment experiment;

  // Receive command line args
  experiment.HandleCommandLineArgs(argc, argv);

  // Run experiment
  experiment.Run();

  return 0;
}