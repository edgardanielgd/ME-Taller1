#include <fstream>
#include <iostream>

#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/internet-module.h"
#include "ns3/mobility-module.h"
#include "ns3/olsr-module.h"
#include "ns3/applications-module.h"
#include "ns3/yans-wifi-helper.h"

// Define main class
class Taller1Experiment
{
public:
    // Define default constructor
    Taller1Experiment();

    // Define default process
    void Run();

    // Handle commandline arguments
    void HandleCommandLineArgs(int, char **);

private:
    // Configure packets receive and send
    Ptr<Socket> SetupPacketReceive(Ipv4Address addr, Ptr<Node> node);

    // Handle received packets
    void ReceivePacket(Ptr<Socket> socket);

    // Update throught
    void UpdateThroughput();

    // UDP sender port number
    uint16_t port;

    // Specialized configs

    // Number of levels
    uint8_t nLevels;

    // Data for first level
    uint8_t nClusters_1st_level, nNodes_pC_1st_level;

    // Data for second level
    uint8_t nClusters_2nd_level, nNodes_pC_2nd_level;

    // Data for third level
    uint8_t nClusters_3rd_level, nNodes_pC_3rd_level;

    // Area bounds
    double width, height;
};

// Default constructor
Taller1Experiment::Taller1Experiment()
    // Default port to 9
    : port(9),
      // Default number of levels to 2
      nLevels(2),
      // Default number of clusters in 1st level to 6
      nClusters_1st_level(6),
      // Default number of nodes per cluster in 1st level to 6
      nNodes_pC_1st_level(6),
      // Default number of clusters in 2nd level to 2
      nClusters_2nd_level(2),
      // Default number of nodes per cluster in 2nd level to 2
      nNodes_pC_2nd_level(2),
      // Default number of clusters in 3rd level to 1
      nClusters_3rd_level(1),
      // Default number of nodes per cluster in 3rd level to 2
      nNodes_pC_3rd_level(2),
      // Default width to 500
      width(500),
      // Default height to 500
      height(500)
{
}

// Receive and set command line arguments
void Taller1Experiment::HandleCommandLineArgs(int argc, char **argv)
{
    /*
     * Get console parameters
     */
    CommandLine cmd(__FILE__);
    cmd.AddValue("nLevels", "Number of levels of this cluster", nLevels);
    // Data for first level
    cmd.AddValue("nClusters_1st_level", "Number of clusters in 1st level", nClusters_1st_level);
    cmd.AddValue("nNodes_pC_1st_level", "Number of nodes per cluster in 1st level", nNodes_pC_1st_level);
    // Data for second level
    uint8_t nClusters_2nd_level = 2, nNodes_pC_2nd_level = 2;
    cmd.AddValue("nClusters_2nd_level", "Number of clusters in 1st level", nClusters_2nd_level);
    cmd.AddValue("nNodes_pC_2nd_level", "Number of nodes per cluster in 1st level", nNodes_pC_2nd_level);
    // Data for third level
    uint8_t nClusters_3rd_level = 1, nNodes_pC_3rd_level = 2;
    cmd.AddValue("nClusters_3rd_level", "Number of clusters in 1st level", nClusters_3rd_level);
    cmd.AddValue("nNodes_pC_3rd_level", "Number of nodes per cluster in 1st level", nNodes_pC_3rd_level);
    // Space bounds
    double width = 500, height = 500;
    cmd.AddValue("width", "Width of the space", width);
    cmd.AddValue("height", "Height of the space", height);
    // Parse arguments
    cmd.Parse(argc, argv);
}

// Configure packets receive and send
Ptr<Socket>
Taller1Experiment::SetupPacketReceive(Ipv4Address addr, Ptr<Node> node)
{
    TypeId tid = TypeId::LookupByName("ns3::UdpSocketFactory");
    Ptr<Socket> sink = Socket::CreateSocket(node, tid);
    InetSocketAddress local = InetSocketAddress(addr, port);
    sink->Bind(local);
    sink->SetRecvCallback(MakeCallback(&Taller1Experiment::ReceivePacket, this));

    return sink;
}

// Called when a packet is received
void Taller1Experiment::ReceivePacket(Ptr<Socket> socket)
{
    Ptr<Packet> packet;
    Address senderAddress;

    int64_t now = Simulator::Now().GetMicroSeconds();
    std::cout << now << " Received one packet!" << std::endl;

    // while ((packet = socket->RecvFrom (senderAddress)))
    //   {
    //     bytesTotal += packet->GetSize ();
    //     packetsReceived += 1;
    //     NS_LOG_UNCOND (PrintReceivedPacket (socket, packet, senderAddress));
    //   }
}

void Taller1Experiment::Run()
{
    // Define simulation time
    double totalTime = 100.0;

    // Define channel
    YansWifiChannelHelper wifiChannel = YansWifiChannelHelper::Default();

    // Using friss propagation loss model
    // It considers variables such as waves distortion due to obstacles, diffraction and related phenomena
    wifiChannel.AddPropagationLoss("ns3::FriisPropagationLossModel");

    // Use constant speed propagation delay model
    wifiChannel.SetPropagationDelay("ns3::ConstantSpeedPropagationDelayModel");

    YansWifiPhyHelper wifiPhy;
    // Create the channel of transmission
    wifiPhy.SetChannel(wifiChannel.Create());

    // Create clusters for each level
    std::vector<NodeContainer> clusters1stLevel;
    clusters1stLevel.reserve(nClusters_1st_level);

    // Create nodes for each cluster in the first level
    for (int i = 0; i < nClusters_1st_level; i++)
    {
        NodeContainer adhocNodesCluster;
        adhocNodesCluster.Create(nNodes_pC_1st_level);
        clusters1stLevel.push_back(adhocNodesCluster);
    }

    // Set mac addresses and wifi standard
    WifiHelper wifi;
    wifi.SetStandard(WIFI_STANDARD_80211b);

    // Assign MAC Address
    WifiMacHelper wifiMac;
    wifi.SetRemoteStationManager("ns3::ConstantRateWifiManager",
                                 "DataMode", StringValue("DsssRate11Mbps"),
                                 "ControlMode", StringValue("DsssRate11Mbps"));

    // Set it to adhoc mode
    wifiMac.SetType("ns3::AdhocWifiMac");

    // Create actual device's container
    NetDeviceContainer devicesCluster1 = wifi.Install(wifiPhy, wifiMac, adhocNodesCluster1);
    NetDeviceContainer devicesCluster2 = wifi.Install(wifiPhy, wifiMac, adhocNodesCluster2);
    NetDeviceContainer devicesCluster3 = wifi.Install(wifiPhy, wifiMac, adhocNodesCluster3);

    // Randomway mobility
    // How it works:
    // https://www.nsnam.org/docs/release/3.35/doxygen/classns3_1_1_random_waypoint_mobility_model.html#details

    ObjectFactory pos;
    pos.SetTypeId("ns3::RandomRectanglePositionAllocator");

    // Define boundaries for our area (By default 500x500), units are meters
    std::stringstream ssMaxX;
    ssMaxX << "ns3::UniformRandomVariable[Min=0.0|Max=" << width << "]";
    pos.Set("X", StringValue(ssMaxX.str()));

    std::stringstream ssMaxY;
    ssMaxY << "ns3::UniformRandomVariable[Min=0.0|Max=" << height << "]";
    pos.Set("Y", StringValue(ssMaxY.str()));

    // Create position allocators based on geometrical boundaries already defined
    int64_t streamIndex = 0; // used to get consistent mobility across scenarios
    Ptr<PositionAllocator> taPositionAlloc = pos.Create()->GetObject<PositionAllocator>();
    streamIndex += taPositionAlloc->AssignStreams(streamIndex);

    // Define speed (Which is distributed uniformly between 0 and 1 (units are m/s))
    double nodeMinSpeed = 0.0, nodeMaxSpeed = 1.0;
    std::stringstream ssSpeed;
    ssSpeed << "ns3::UniformRandomVariable[Min=" << nodeMinSpeed << "|Max=" << nodeMaxSpeed << "]";

    // Pause refers to the time a node waits before changing direction
    // (Node remains static while this time passes)
    std::stringstream ssPause;
    double nodePause = 0.0;
    ssPause << "ns3::ConstantRandomVariable[Constant=" << nodePause << "]";

    // Configure mobility model

    // Set random way mobility
    MobilityHelper mobilityAdhoc;
    mobilityAdhoc.SetMobilityModel("ns3::RandomWaypointMobilityModel",
                                   "Speed", StringValue(ssSpeed.str()),
                                   "Pause", StringValue(ssPause.str()),
                                   "PositionAllocator", PointerValue(taPositionAlloc));
    mobilityAdhoc.SetPositionAllocator(taPositionAlloc);

    // All nodes (independently from cluster will have the same mobility model)
    mobilityAdhoc.Install(adhocNodes);

    // Enable OLSR
    OlsrHelper olsr;
    Ipv4StaticRoutingHelper staticRouting;

    Ipv4ListRoutingHelper list;
    list.Add(staticRouting, 0); // Second parameter indicates routing priority
    list.Add(olsr, 10);

    InternetStackHelper internet;
    internet.SetRoutingHelper(list); // has effect on the next Install ()
    internet.Install(adhocNodes);

    Ipv4AddressHelper addressAdhoc;
    NS_LOG_INFO("Assign IP Addresses.");

    // IP Address base for cluster 1
    addressAdhoc.SetBase("10.1.1.0", "255.255.255.0");
    Ipv4InterfaceContainer adhocInterfacesCluster1 = addressAdhoc.Assign(devicesCluster1);

    // IP Address base for cluster 2
    addressAdhoc.SetBase("10.1.2.0", "255.255.255.0");
    Ipv4InterfaceContainer adhocInterfacesCluster2 = addressAdhoc.Assign(devicesCluster2);

    // IP Address base for cluster 3
    addressAdhoc.SetBase("10.1.3.0", "255.255.255.0");
    Ipv4InterfaceContainer adhocInterfacesCluster3 = addressAdhoc.Assign(devicesCluster3);

    // Set clusters heads
    Ptr<Node> cluster1Head = adhocNodesCluster1.Get(0);
    Ptr<Node> cluster2Head = adhocNodesCluster2.Get(0);
    Ptr<Node> cluster3Head = adhocNodesCluster3.Get(0);

    // Send packets
    OnOffHelper onoff1("ns3::UdpSocketFactory", Address());
    onoff1.SetAttribute("OnTime", StringValue("ns3::ConstantRandomVariable[Constant=1.0]"));
    onoff1.SetAttribute("OffTime", StringValue("ns3::ConstantRandomVariable[Constant=0.0]"));

    for (int i = 0; i < 5; i++)
    {
        Ptr<Socket> sink = SetupPacketReceive(adhocInterfacesCluster1.GetAddress(i), adhocNodes.Get(i));

        AddressValue remoteAddress(InetSocketAddress(adhocInterfacesCluster1.GetAddress(i), port));
        onoff1.SetAttribute("Remote", remoteAddress);

        Ptr<UniformRandomVariable> var = CreateObject<UniformRandomVariable>();
        ApplicationContainer temp = onoff1.Install(adhocNodes.Get(i + 5));
        temp.Start(Seconds(var->GetValue(100.0, 101.0)));
        temp.Stop(Seconds(totalTime));
    }

    // TODO: Assign resources with truncated geomtrical distribution

    // Set simulation time
    Simulator::Stop(Seconds(totalTime));

    Simulator::Run();
    Simulator::Destroy();
}

int main(int argc, char *argv[])